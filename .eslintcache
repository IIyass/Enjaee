[{"/home/ilyass/Freelance/Figma_India_Screen/app/src/Container/WebChat/index.js":"1","/home/ilyass/Freelance/Figma_India_Screen/app/src/store/WebChat/reducer.js":"2","/home/ilyass/Freelance/Figma_India_Screen/app/src/helpers/index.js":"3","/home/ilyass/Freelance/Figma_India_Screen/app/src/Components/ChatScreen/index.js":"4","/home/ilyass/Freelance/Figma_India_Screen/app/src/Components/VideoChat/index.js":"5","/home/ilyass/Freelance/Figma_India_Screen/app/src/store/WebChat/action.js":"6","/home/ilyass/Freelance/Figma_India_Screen/app/src/Components/VideoChat/style.js":"7","/home/ilyass/Freelance/Figma_India_Screen/app/src/WebRTC/index.js":"8","/home/ilyass/Freelance/Figma_India_Screen/app/src/Components/VideoChat/Screen.js":"9","/home/ilyass/Freelance/Figma_India_Screen/app/src/hooks/usePrevious.js":"10","/home/ilyass/Freelance/Figma_India_Screen/app/src/hooks/useVideoRoom.js":"11","/home/ilyass/Freelance/Figma_India_Screen/app/src/hooks/useTimer.js":"12"},{"size":5258,"mtime":1609383386605,"results":"13","hashOfConfig":"14"},{"size":1373,"mtime":1609383386681,"results":"15","hashOfConfig":"14"},{"size":1274,"mtime":1609383386641,"results":"16","hashOfConfig":"14"},{"size":2232,"mtime":1609383386553,"results":"17","hashOfConfig":"14"},{"size":6205,"mtime":1609383386577,"results":"18","hashOfConfig":"14"},{"size":2911,"mtime":1609383386677,"results":"19","hashOfConfig":"14"},{"size":2062,"mtime":1609383386585,"results":"20","hashOfConfig":"14"},{"size":2358,"mtime":1609383386637,"results":"21","hashOfConfig":"14"},{"size":722,"mtime":1609383386565,"results":"22","hashOfConfig":"14"},{"size":245,"mtime":1609383386649,"results":"23","hashOfConfig":"14"},{"size":881,"mtime":1609383386661,"results":"24","hashOfConfig":"14"},{"size":1028,"mtime":1609383386649,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"efftur",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ilyass/Freelance/Figma_India_Screen/app/src/Container/WebChat/index.js",["54","55","56","57","58","59"],"import React, { useEffect, useCallback } from 'react';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport * as Style from './style';\nimport Jolie from '../../Illustration/Henry.png'\nimport Input from '../../Components/UI/AuthInput'\nimport ChatButton from '../../Components/UI/chatButton';\nimport ChatScreen from '../../Components/ChatScreen'\nimport AudioChat from '../../Components/AudioChat';\nimport VideoChat from '../../Components/VideoChat';\nimport BodyContainer from '../../Common/Body';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport {\n    goToChatRoom,\n    goToAudioRoom,\n    goToVideoRoom,\n    SendMessage\n} from '../../store/WebChat/action'\nimport { doVideoOffer, doCandidate, doVideoAnswer, startCallAction, leaveRoom } from '../../store/WebChat/action'\nimport { fetchMyData } from '../../store/Me/action';\nimport { firestoreFirebase } from '../../firebaseService/FirebaseIndex';\nimport usePrevious from '../../hooks/usePrevious'\nimport 'webrtc-adapter'\nconst messagesRef = firestoreFirebase.collection('/messages');\n\n\nconst WebChat = (props) => {\n\n    const {\n        location,\n        SendMessage,\n        goToAudioRoom,\n        goToChatRoom,\n        goToVideoRoom,\n        fetchMyData,\n        doCandidate,\n        doVideoOffer,\n        doVideoAnswer,\n        startCallAction,\n        leaveRoom\n    } = props\n\n    const dispatch = useDispatch();\n\n    const fetchMyDataCall = useCallback(\n        () => dispatch(fetchMyData),\n        [dispatch, fetchMyData]\n    );\n\n    useEffect(() => {\n        fetchMyDataCall()\n    }, [fetchMyDataCall]);\n\n    const query = messagesRef\n        .where(\"room\", \"==\", location.state.id)\n        .orderBy(\"createdAt\")\n        .limitToLast(24)\n\n\n    const chatStep = useSelector((state) => state.WebChatReducer.chatStep)\n    const videoStep = useSelector((state) => state.WebChatReducer.videoStep)\n    const me = useSelector((state) => state.MeReducer.Me)\n    const [snapshot, loading, error] = useCollectionData(query, { idField: 'id' });\n\n    const goToAudioRoomCall = useCallback(\n        () => dispatch(goToAudioRoom),\n        [dispatch, goToAudioRoom]\n    );\n\n    const goToChatRoomCall = useCallback(\n        () => dispatch(goToChatRoom),\n        [dispatch, goToChatRoom]\n    );\n\n    const goToVideoRoomCall = useCallback(\n        () => dispatch(goToVideoRoom),\n        [dispatch, goToVideoRoom]\n    );\n\n    const handleChatStep = () => {\n        switch (chatStep) {\n            case 1:\n                return <ChatScreen\n                    gradientMessage\n                    participants={location.state}\n                    SendMessage={SendMessage}\n                    messages={snapshot}\n                    me={me}\n                    loading={loading}\n                />;\n            case 2:\n                return <AudioChat />;\n            case 3:\n                return <VideoChat\n                    doVideoOffer={doVideoOffer}\n                    doCandidate={doCandidate}\n                    participants={location.state}\n                    videoStep={videoStep}\n                    doAnswer={doVideoAnswer}\n                    me={me}\n                    leaveRoom={leaveRoom}\n                    startCallAction={startCallAction}\n                />;\n            default:\n                return <ChatScreen gradientMessage />;\n        }\n    }\n    return (\n        <Style.Wrapper as={BodyContainer}>\n            <Style.LeftContainer>\n                <div id=\"image\">\n                    <img alt=\"profil\" src={Jolie} />\n                </div>\n                <Input type=\"text\" name=\"name\" disabled value={me.name} icon=\"blackcontact\" placeholder=\"Full name\" />\n                <Input type=\"text\" disabled value='Developer' name=\"function\" icon=\"success\" placeholder=\"Developers\" />\n                <ChatButton onClick={() => goToChatRoomCall()} icon={chatStep === 1 ? 'chatWhite' : 'chat'} border={chatStep === 1 ? '#53A8CB' : '#000'} color={chatStep === 1 ? '#53A8CB' : 'fff'} text={chatStep === 1 ? '#fff' : '000'}>Chat</ChatButton>\n                <ChatButton onClick={() => goToAudioRoomCall()} icon={chatStep === 2 ? 'audioWhite' : 'audio'} border={chatStep === 2 ? '#53A8CB' : '#000'} color={chatStep === 2 ? '#53A8CB' : 'fff'} text={chatStep === 2 ? '#fff' : '000'}>Audio Call</ChatButton>\n                <ChatButton onClick={() => goToVideoRoomCall()} icon={chatStep === 3 ? 'videoWhite' : 'video'} border={chatStep === 3 ? '#53A8CB' : '#000'} color={chatStep === 3 ? '#53A8CB' : 'fff'} text={chatStep === 3 ? '#fff' : '000'}>Video Call</ChatButton>\n                <ChatButton icon=\"clear\" border=\"#000\" color=\"#fff\" text=\"#000\">Clear Chat</ChatButton>\n                <ChatButton icon=\"block\" border=\"#000\" color=\"#fff\" text=\"#000\">Block</ChatButton>\n            </Style.LeftContainer>\n            <Style.RightContainer backgroundColor={chatStep === 1}>\n                {handleChatStep()}\n            </Style.RightContainer>\n        </Style.Wrapper>\n    );\n};\n\nexport default connect(null,\n    {\n        goToAudioRoom,\n        goToChatRoom,\n        goToVideoRoom,\n        fetchMyData,\n        SendMessage,\n        doVideoOffer,\n        doCandidate,\n        doVideoAnswer,\n        startCallAction,\n        leaveRoom\n    })(WebChat);\n\n",["60","61"],"/home/ilyass/Freelance/Figma_India_Screen/app/src/store/WebChat/reducer.js",[],"/home/ilyass/Freelance/Figma_India_Screen/app/src/helpers/index.js",[],"/home/ilyass/Freelance/Figma_India_Screen/app/src/Components/ChatScreen/index.js",["62"],"import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport * as Style from './style';\nimport FooterButton from '../UI/FooterButton';\nimport ChatInput from '../UI/ChatInput';\nimport Quote from './Words';\nimport Jolie from '../../Illustration/Joli.png';\nimport Jhon from '../../Illustration/Martin.png';\nimport { getUserNameById } from '../../helpers'\n\nconst ChatScreen = (props) => {\n  const {\n    gradientMessage,\n    participants,\n    SendMessage,\n    messages,\n    loading,\n    me\n  } = props;\n\n  const [content, setContent] = useState('');\n  const [name, setName] = useState([])\n\n  const dummy = useRef();\n\n  const getMyName = useCallback(\n    (id) => {\n      getUserNameById(id).then(res => setName((name) => [...name, {\n        id,\n        name: res\n      }]))\n    }, []\n  );\n\n  useEffect(() => {\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }, [messages])\n\n\n  useEffect(() => {\n    participants.participants.map(e => getMyName(e))\n  }, [])\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    SendMessage({ content, room: participants.id })\n    setContent('');\n  };\n\n  const handleChange = (e) => {\n    setContent(e.target.value);\n  };\n\n  const date = new Date();\n\n  return (\n    <Style.RightSide>\n      <Style.CrossWrapper>\n        {!loading ? messages.map((e, index) => {\n          return e.userId === me.id ? <Quote\n            key={index}\n            sender\n            avatar={Jolie}\n            time={e.createdAt === null ? date : e.createdAt.toDate()}\n            name={me.name}\n            text={e.text}\n          /> :\n            <Quote\n              key={index}\n              avatar={Jhon}\n              gradientMessage={gradientMessage}\n              time={e.createdAt.toDate()}\n              name={name.map(x => e.userId === x.id && x.name)}\n              text={e.text}\n            />\n        }) : <h1>Loading</h1>}\n        <span ref={dummy}></span>\n      </Style.CrossWrapper>\n      <Style.Footer>\n        <ChatInput onChange={handleChange} type=\"text\" name=\"chat\" placeholder=\"Type here…\" value={content} />\n        <FooterButton onClick={handleSubmit}>Send</FooterButton>\n      </Style.Footer>\n    </Style.RightSide>\n  );\n};\n\nexport default React.memo(ChatScreen);\n","/home/ilyass/Freelance/Figma_India_Screen/app/src/Components/VideoChat/index.js",["63"],"import React, { useRef, useEffect, useState } from 'react';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport * as Style from './style';\nimport { sendOfferCall, sendAnswerCall, } from '../../WebRTC'\nimport { firestoreFirebase } from '../../firebaseService/FirebaseIndex';\nimport MuteVideo from '../../Illustration/muteicon@3x.svg';\nimport CallVideo from '../../Illustration/receivevideocallicon.svg';\nimport ProfilButton from '../UI/ProfilButton';\nimport receivevideocallicon from '../../Illustration/receivevideocallicon.svg';\nimport silenticon from '../../Illustration/silenticon.svg';\nimport endreceiveaudiocallicons from '../../Illustration/volumeicon.svg';\nimport 'webrtc-adapter'\nimport { formatTime } from '../../helpers'\nimport firebase from 'firebase';\nimport useVideoRoom from '../../hooks/useVideoRoom'\nimport useTimer from '../../hooks/useTimer'\n\nconst roomsRef = firestoreFirebase.collection('/rooms');\nconst usersRef = firestoreFirebase.collection('/users');\n\nconst VideoChat = (props) => {\n\n  const {\n    doVideoOffer,\n    doCandidate,\n    participants,\n    videoStep,\n    doAnswer,\n    me,\n    startCallAction,\n    leaveRoom,\n  } = props;\n\n  const remoteVideoRef = useRef(null);\n  const { timer, handleStart, handleReset } = useTimer();\n  const [mute, setMute] = useState(false);\n  const [displayVideo, setDisplayVideo] = useState(true);\n  const [localconnection, localstream, localVideoRef] = useVideoRoom(videoStep);\n\n\n  // Listening on Room with id === paricitpant.id\n  const RoomQuery = roomsRef\n    .where(firebase.firestore.FieldPath.documentId(), \"==\", participants.id);\n  const [snapshot1, loading1, error1] = useCollectionData(RoomQuery, { idField: 'id' });\n\n  // Listening on updating my candidate field.\n  const UserQuery = usersRef\n    .where(firebase.firestore.FieldPath.documentId(),\n      \"==\",\n      participants.participants.filter(e => e === me.id)[0]);\n  const [snapshot2, loading2, error2] = useCollectionData(UserQuery, { idField: 'id' });\n\n  // Caller Receive Answer.\n  useEffect(() => {\n    if (!loading1 && snapshot1[0].type === 'answer' && snapshot1[0].from !== me.id) {\n      async function StartingCall() {\n        const answer = JSON.parse(snapshot1[0].answer)\n        await localconnection.setRemoteDescription(answer);\n      }\n      StartingCall()\n    }\n    return handleReset();\n  }, [loading1, snapshot1])\n\n  // Setting candidate Data after filling remoteDescription value.\n  useEffect(() => {\n    if (!loading2 &&\n      !loading1 &&\n      snapshot1[0].type === 'answer' &&\n      snapshot2[0].VideoRoom.type === 'candidate' &&\n      localconnection.remoteDescription !== null\n    ) {\n      // apply the new received candidate to the connection\n      async function addCandidateCall() {\n        const candidate = JSON.parse(snapshot2[0].VideoRoom.candidate)\n        await localconnection.addIceCandidate(new RTCIceCandidate(candidate))\n        startCallAction();\n        handleStart();\n      }\n      addCandidateCall()\n    }\n    return handleReset();\n  }, [loading1, loading2, snapshot1, snapshot2, videoStep]);\n\n  useEffect(() => {\n    if (!loading1 &&\n      snapshot1[0].type === 'leave'\n    ) {\n      leaveRoom(me.id,\n        participants.participants.filter(e => e !== me.id),\n        participants.id, localconnection, localstream)\n    }\n\n  }, [loading1, snapshot1]);\n\n  const renderCallComponent = () => {\n    return <div>\n      {!loading1 && snapshot1[0].type === 'offer' && snapshot1[0].from === me.id ?\n        <ProfilButton>Waiting Other Response </ProfilButton> :\n        <ProfilButton onClick={() => sendOfferCall(localconnection,\n          localstream,\n          participants,\n          me,\n          remoteVideoRef,\n          doCandidate,\n          doVideoOffer)}>\n          Call OtherName\n            </ProfilButton>\n      }\n    </div>\n  }\n\n  const renderAnswerComponent = () => {\n    return <div>\n      <ProfilButton onClick={() => sendAnswerCall(localconnection,\n        localstream,\n        participants,\n        snapshot1[0],\n        me,\n        remoteVideoRef,\n        doCandidate,\n        doAnswer\n      )}>Accept</ProfilButton>\n      <ProfilButton onClick={() => leaveRoom(me.id,\n        participants.participants.filter(e => e !== me.id),\n        participants.id, localconnection, localstream)} >Decline</ProfilButton>\n    </div>\n  }\n  const stop = () => {\n    localstream.getVideoTracks()[0].stop();\n    localVideoRef.current.srcObject = null;\n    setDisplayVideo(false);\n  };\n\n\n  const renderTwoVideoScreen = () => <><video\n    className=\"videoInsert\"\n    muted={mute}\n    ref={remoteVideoRef}\n    autoPlay\n    playsInline>\n  </video>\n    <div id=\"top\">\n      <div><h1>{formatTime(timer)}</h1></div>\n      <video\n        className=\"video\" muted ref={localVideoRef} autoPlay playsInline>\n      </video>\n    </div>\n    <div id=\"bottom\">\n      {mute ? <img alt=\"silent\" onClick={() => setMute(!mute)} src={silenticon} /> :\n        <img alt=\"silent\" onClick={() => setMute(!mute)} src={endreceiveaudiocallicons} />\n      }\n      <ProfilButton\n        onClick={() => leaveRoom(me.id,\n          participants.participants.filter(e => e !== me.id),\n          participants.id)} >End Call</ProfilButton>\n\n      {displayVideo ? <img onClick={() => stop('video')}\n        alt=\"MuteVideo\"\n        src={CallVideo} /> :\n        <img\n          alt=\"silent\"\n          src={MuteVideo}\n        />\n      }\n\n    </div>\n  </>\n\n  const handleVideoChat = () => {\n    switch (videoStep) {\n      case 1:\n        return <>\n          <video id=\"profil\" muted ref={localVideoRef} autoPlay playsInline></video>\n          <video ref={remoteVideoRef}\n            style={{ display: 'none' }}\n            autoPlay\n            playsInline>\n          </video>\n          <img alt=\"img\" src={receivevideocallicon} />\n          {\n            loading1 ? <h2>loading1..</h2> :\n              (snapshot1[0].from === '' || snapshot1[0].from === me.id) ?\n                renderCallComponent() :\n                renderAnswerComponent()}\n        </>\n      case 2:\n        return renderTwoVideoScreen();\n      default: return null;\n    }\n  };\n\n  return (\n    <Style.Wrapper>\n      {handleVideoChat()}\n    </Style.Wrapper>\n  );\n};\n\nexport default VideoChat;\n","/home/ilyass/Freelance/Figma_India_Screen/app/src/store/WebChat/action.js",[],"/home/ilyass/Freelance/Figma_India_Screen/app/src/Components/VideoChat/style.js",[],"/home/ilyass/Freelance/Figma_India_Screen/app/src/WebRTC/index.js",[],"/home/ilyass/Freelance/Figma_India_Screen/app/src/Components/VideoChat/Screen.js",["64","65"],"/home/ilyass/Freelance/Figma_India_Screen/app/src/hooks/usePrevious.js",[],"/home/ilyass/Freelance/Figma_India_Screen/app/src/hooks/useVideoRoom.js",[],"/home/ilyass/Freelance/Figma_India_Screen/app/src/hooks/useTimer.js",[],{"ruleId":"66","severity":1,"message":"67","line":1,"column":41,"nodeType":"68","messageId":"69","endLine":1,"endColumn":49},{"ruleId":"66","severity":1,"message":"70","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":16},{"ruleId":"66","severity":1,"message":"71","line":23,"column":5,"nodeType":"68","messageId":"69","endLine":23,"endColumn":29},{"ruleId":"66","severity":1,"message":"72","line":24,"column":5,"nodeType":"68","messageId":"69","endLine":24,"endColumn":17},{"ruleId":"66","severity":1,"message":"73","line":25,"column":5,"nodeType":"68","messageId":"69","endLine":25,"endColumn":15},{"ruleId":"66","severity":1,"message":"74","line":64,"column":31,"nodeType":"68","messageId":"69","endLine":64,"endColumn":36},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":42,"column":6,"nodeType":"81","endLine":42,"endColumn":8,"suggestions":"82"},{"ruleId":"66","severity":1,"message":"83","line":8,"column":3,"nodeType":"68","messageId":"69","endLine":8,"endColumn":12},{"ruleId":"84","severity":1,"message":"85","line":12,"column":13,"nodeType":"86","endLine":12,"endColumn":37},{"ruleId":"84","severity":1,"message":"85","line":14,"column":13,"nodeType":"86","endLine":14,"endColumn":51},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'firebase' is defined but never used.","'listenToConnectionEvents' is defined but never used.","'addCandidate' is defined but never used.","'sendAnswer' is defined but never used.","'error' is assigned a value but never used.","no-native-reassign",["87"],"no-negated-in-lhs",["88"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getMyName' and 'participants.participants'. Either include them or remove the dependency array.","ArrayExpression",["89"],"'startCall' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},"Update the dependencies array to be: [getMyName, participants.participants]",{"range":"92","text":"93"},[979,981],"[getMyName, participants.participants]"]